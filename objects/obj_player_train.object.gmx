<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>touchX          = -1;           // 玩家觸碰點
touchY          = -1;
isPressed       = false;        // 是否正壓著

// 火車列
charList = ds_list_create();
// 火車頭char0
ds_list_add(charList, instance_create(1000, 1000, obj_char_1));
char0 = ds_list_find_value(charList, 0);
char0.command = FACE_U;
char0.isLeader = true;

/*
//測試多人
// char1
ds_list_add(charList, instance_create(1000, 1060, obj_char_1));
char1 = ds_list_find_value(charList, 1);
char1.command = FACE_U;

// char2
ds_list_add(charList, instance_create(1000, 1120, obj_char_1));
char2 = ds_list_find_value(charList, 2);
char2.command = FACE_U;

// char3
ds_list_add(charList, instance_create(1000, 1180, obj_char_1));
char3 = ds_list_find_value(charList, 3);
char3.command = FACE_U;

// char4
ds_list_add(charList, instance_create(1000, 1240, obj_char_1));
char4 = ds_list_find_value(charList, 4);
char4.command = FACE_U;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 檢查火車自身碰撞(不與第二碰撞，因此i設定為2)
size = ds_list_size(charList);
for(i=2;i&lt;size;i++)
{
    char = ds_list_find_value(charList, i);
    
    if(collision_rectangle(char.bbox_left,char.bbox_top,char.bbox_right,char.bbox_bottom,char0,true,false))
    {
        //show_message(string(char.pos));
        ds_list_delete(charList,i);
        char.isAlive = false;        
        break;
    }
}

// 脫隊者加速
size = ds_list_size(charList);
for(i=1;i&lt;size;i++)
{
    lastChar = ds_list_find_value(charList, i-1);
    char = ds_list_find_value(charList, i);
    // 前一員的麵包數
    lastBreadCount = ds_list_size(lastChar.nodeXList);
    // 自己的麵包數
    breadCount = ds_list_size(char.nodeXList);
    
    // 麵包數差額若大於16
    if(breadCount-lastBreadCount &gt;= 16)
    {
        char.x = ds_list_find_value(char.nodeXList,0);
        char.y = ds_list_find_value(char.nodeYList,0);        
        char.command = ds_list_find_value(char.nodeDirList,0);
        ds_list_delete(char.nodeXList,0);
        ds_list_delete(char.nodeYList,0);
        ds_list_delete(char.nodeDirList,0);
    }
    
    // 如果麵包差額過大，再執行一次，等於用兩倍速度前進
    if(breadCount-lastBreadCount &gt;= 17)
    {
        char.x = ds_list_find_value(char.nodeXList,0);
        char.y = ds_list_find_value(char.nodeYList,0);        
        char.command = ds_list_find_value(char.nodeDirList,0);
        ds_list_delete(char.nodeXList,0);
        ds_list_delete(char.nodeYList,0);
        ds_list_delete(char.nodeDirList,0);
    }
}

/*
if(collision_rectangle(char4.bbox_left,char4.bbox_top,char4.bbox_right,char4.bbox_bottom,char0,true,false))
{
    show_message("HIT");
}
*/

// 新增一個char到隊伍最後
if(keyboard_check_released(vk_space))
{
    size = ds_list_size(charList);
    lastChar = ds_list_find_value(charList, size-1);
    switch(lastChar.faceTo)
    {
        case FACE_U:
            ds_list_add(charList, instance_create(lastChar.x, lastChar.y, obj_char_1));            
        break;
        case FACE_D:
            ds_list_add(charList, instance_create(lastChar.x, lastChar.y, obj_char_1));            
        break;
        case FACE_L:
            ds_list_add(charList, instance_create(lastChar.x, lastChar.y, obj_char_1));            
        break;
        case FACE_R:
            ds_list_add(charList, instance_create(lastChar.x, lastChar.y, obj_char_1));            
        break;
    }
    pos = ds_list_size(charList) - 1;
    char = ds_list_find_value(charList, pos);
    char.pos = pos;
    char.command = lastChar.faceTo;
    ds_list_copy(char.nodeXList,lastChar.nodeXList);
    ds_list_copy(char.nodeYList,lastChar.nodeYList);    
    ds_list_copy(char.nodeDirList,lastChar.nodeDirList);
}

// 鍵盤移動
if(keyboard_check_pressed(vk_left))
    char0.command = FACE_L;
if(keyboard_check_pressed(vk_right))
    char0.command = FACE_R;
if(keyboard_check_pressed(vk_up))
    char0.command = FACE_U;
if(keyboard_check_pressed(vk_down))
    char0.command = FACE_D;        

// 觸碰移動
if(mouse_check_button(mb_left))
{
    if(!isPressed)
    {
        isPressed = true;
        touchX = mouse_x;
        touchY = mouse_y;
    }
    
    effectDistance = 40;            // 觸碰感應半徑
    distance = point_distance(mouse_x,mouse_y,touchX,touchY);
    if(distance &gt;= effectDistance)
    {
        //char = ds_list_find_value(charList, 0);
        xDistance = mouse_x - touchX;
        yDistance = mouse_y - touchY;
        if(abs(xDistance) &gt;= abs(yDistance))
        {
            if(mouse_x &gt;= touchX)
            {
                char0.command = FACE_R;
            }
            else
            {
                char0.command = FACE_L;
            }    
        }
        else
        {
            if(mouse_y &gt;= touchY)
            {
                char0.command = FACE_D;
            }
            else
            {
                char0.command = FACE_U;
            }
        }        
    }
}
/*
if(char0.command != char0.faceTo)
{        
    size = ds_list_size(charList);

    for(i=1;i&lt;size;i++)
    {
        char = ds_list_find_value(charList, i);
        ds_list_add(char.nodeXList,char0.x);
        ds_list_add(char.nodeYList,char0.y);
        ds_list_add(char.nodeDirList,char0.command);
    }       
}
*/

// 火車頭留下路徑麵包削
for(i=1;i&lt;size;i++)
{
    char = ds_list_find_value(charList, i);
    ds_list_add(char.nodeXList,char0.x);
    ds_list_add(char.nodeYList,char0.y);
    ds_list_add(char.nodeDirList,char0.command);
} 
 
if(mouse_check_button_released(mb_left))
{
    touchX = -1;
    touchY = -1;
    isPressed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
