<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_itm_bigbomb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = BULL_BOMB;
image_speed = 0.1;

isDeki = false;
targetX = 0;
targetY = 0;
spd = 0;
atk = 0;
range = 0;      // for bomb

isAlive = true;

Sname = part_system_create();

 particle1 = part_type_create();
part_type_shape(particle1,pt_shape_square);
part_type_size(particle1,0.01,0.20,-0.01,0);
part_type_scale(particle1,1,1);
part_type_color3(particle1,255,16777215,33023);
part_type_alpha1(particle1,1)
part_type_speed(particle1,1,6,0,0);
part_type_direction(particle1,0,359,0,0);
part_type_orientation(particle1,0,0,0,0,1);
part_type_blend(particle1,1);
part_type_life(particle1,4,10);
emitter1 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,1);
part_emitter_stream(Sname,emitter1,particle1,3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.pause)
{
    speed = 0;
    return 0;
}

if(spd&gt;0)
{
    move_towards_point(targetX,targetY,spd);
}

part_emitter_region(Sname,emitter1,x+10,x+10,y-60,y-60,ps_shape_ellipse,1);

if(!scr_is_in_map(x,y))
{
    part_emitter_destroy_all(Sname);
    part_system_destroy(Sname);    
    instance_destroy();
    return 0;
}

if(!isAlive)
{
    part_emitter_destroy_all(Sname);
    part_system_destroy(Sname);    
    instance_destroy();
    return 0;
}

// for bomb 
var range = 240;

if(scr_is_kakusei(13))
    range = 360;
                
//show_debug_message(string(distance_to_point(targetX,targetY)));

if(distance_to_point(targetX,targetY) &lt;= spd)
{
    
    var sizeDTrainList = ds_list_size(global.dekiTrainList);
    for(var i=0;i&lt;sizeDTrainList;i++)
    {
//        show_debug_message(string(sizeDTrainList)+","+string(i));
        var dekiTrain = ds_list_find_value(global.dekiTrainList, i);
        if(instance_exists(dekiTrain))
        {
            var sizeDTrain = ds_list_size(dekiTrain.train);
            for(var j=0;j&lt;sizeDTrain;j++)
            {
                var dChar = ds_list_find_value(dekiTrain.train, j);
                if(instance_exists(dChar))
                {                    
                    //if(collision_rectangle(targetX-range,targetY-range,targetY+range,targetY+range,dChar,true,false))
                    if(distance_to_point(dChar.x, dChar.y) &lt;= range)
                    {
                        dChar.delHP += atkPower;
                    }
                }
            }
        }
    }
    
    if(scr_is_kakusei(13))       
        instance_create(other.x, other.y-40, obj_part_bigbomb); 
    else
        instance_create(other.x, other.y-40, obj_part_bomb); 
    
    boomCheck = instance_create(other.x, other.y-40, obj_boom_check);
    boomCheck.range = range;
    
    isAlive = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
