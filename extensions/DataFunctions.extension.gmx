<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>DataFunctions</name>
  <version>0.9.7</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>28/09/2012</date>
  <license>Free for non-commercial use</license>
  <description>Extra functions for better data access. Contains array, variable, string and datascructure functions, all designed to make the life of GML writers a little more bearable.</description>
  <helpfile></helpfile>
  <androidProps>-1</androidProps>
  <iosProps>-1</iosProps>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <androidinject></androidinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <androidPermissions/>
  <IncludedResources/>
  <files>
    <file>
      <filename>DataFunctions.gml</filename>
      <origname>C:\Users\Administrator\Documents\_dev\__Extensions\DataFunctions\datafunctions0.9.7.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>array_add</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_add(array:str,value:int/str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_clear</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_clear(array:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_copy</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_copy(array:str,source:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_empty</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_empty(array:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_get</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_get(array:str,index:int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_has</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_has(array:str,value:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_implode</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_implode(array:str,glue:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_insert</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_insert(array:str,index:int,value:int/str)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_pos</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_pos(array:str,value:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_search</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_search(array:str,value:str,[offset:int])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>array_set</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_set(array:str,index:int,value:int/str)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_shuffle</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_shuffle(array:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_size</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_size(array:str,[sec:int=16]) // warning: ignores trailing zeroes</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>array_sort</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_sort(array:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>array_to_list</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>array_to_list(array:str,[list:id])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>ds_list_get</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_get(list:id,pos:int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_list_implode</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_implode(list:id,glue:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_list_search</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_search(list:id,value:str,[offset:int])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>ds_list_set</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_set(list:id,pos:int,value:str/int)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_list_to_array</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_to_array(list:id,array:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_list_to_map</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_list_to_map(list:id,[map:id],[prefix:str],[suffix:str])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>ds_map_get</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_get(map:id,key:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_implode</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_implode(map:id,glue1:str,glue2:str)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_index_get</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_index_get(map:id,pos:int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_search</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_search(map:id,value:str,[offset:key])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>ds_map_set</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_set(map:id,key:str/int,value:str/int)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_shuffle</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_shuffle(map:id)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_sort</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_sort(map:id,ascend:bool)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_to_array</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_to_array(map:id,array:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>ds_map_to_list</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>ds_map_to_list(map:id,[list:id])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>str_after</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_after(input:str,from:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_after_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_after_ext(input:str,from:str/int,offset:str/int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_after_last</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_after_last(input:str,from:str/int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_before</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_before(input:str,to:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_before_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_before_ext(input:str,to:str/int,offset:str/int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_before_last</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_before_last(input:str,to:str/int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_between</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_between(input:str,from:str/int,to:str/int)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_between_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_between_ext(input:str,from:str/int,to:str/int,offset:str/int,escape:str/bool,match:bool)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_compress</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_compress(input:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_explode</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_explode(input:str,seperator:str,array:str)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_find</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_find(input:str,target:str)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_find_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_find_ext(input:str,target:str,offset:str/int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_first</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_first(input:str,substr:str,substr:str)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_is_escaped</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_is_escaped(needle:str/int,haystack:str,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_is_first</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_is_first(haystack:str,needle:str/int,needle:str/int)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_is_first_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_is_first_ext(haystack:str,needle:str/int,needle:str/int,offset:int,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_is_numeric</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_is_numeric(input:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_line_resize</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_line_resize(input:str,width:int,[ellipsis:str],[word:bool])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>str_outside</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_outside(input:str,from:str/int,to:str/int)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_outside_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_outside_ext(input:str,from:str/int,to:str/int,offset:str/int,escape:str/bool,match:bool)</help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_resize</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_resize(input:str,width:int,height:int,start:int)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_to_list</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_to_list(input:str,seperator:str,list:id)</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>str_unescape</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>str_unescape(input:str,escape:str/bool)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_get</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_get(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_get_name</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_get_name(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_get_scope</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_get_scope(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_empty</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_empty(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_empty_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_empty_ext(variable:str,[variable:str,[var...]])</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>var_is_global</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_global(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_global_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_global_ext(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_local</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_local(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_local_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_local_ext(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_set</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_set(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_is_set_ext</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_is_set_ext(variable:str)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>var_set</name>
          <externalName></externalName>
          <kind>2</kind>
          <help>var_set(variable:str,value:str/int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants>
        <constant>
          <name>datafunctions_author</name>
          <value>"WBG / Stratadox"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>datafunctions_components</name>
          <value>"array, ds, str, var"</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>datafunctions_version</name>
          <value>"0.9.7"</value>
          <hidden>0</hidden>
        </constant>
      </constants>
    </file>
  </files>
</extension>
